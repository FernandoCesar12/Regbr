# -*- coding: utf-8 -*-
"""Portarias_ANAC_PowerBI.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15jNOWuOjSoqixZUEi_QjoY29K_1csmt7

# Se conectando com o Google Drive
"""

from google.colab import drive
drive.mount('/gdrive', force_remount=True)

# Commented out IPython magic to ensure Python compatibility.
# %cd '/gdrive/My Drive/PDFs_ANA'
# %ls

"""# Entrando com os pacotes necessários"""

!pip install selenium
!apt-get update # to update ubuntu to correctly run apt install
!apt install chromium-chromedriver
!cp /usr/lib/chromium-browser/chromedriver /usr/bin

!pip install pdf2image
!apt-get install -y poppler-utils
from pdf2image import convert_from_path
from PIL import Image

pip install easyocr

"""# Entrando com a base de dados"""

import pandas as pd

df = pd.read_excel('ANAC.csv', sheet_name='Portarias +Decisões + IACs')

"""# Separando quais portarias estão revogadas"""

revogada = list(df['Revogada'])[0:3]

lista_revogada = []

for i in range(0,len(revogada)):
    if 'Revogada' in str(revogada[i]):
        lista_revogada.append('True')
    else:
        lista_revogada.append('False')

"""# Arrumando os links presentes no excel"""

lista_link = []
for i in range(0,len(df['Hiperlink_Excel'])):
  lista_link.append(df['Hiperlink_Excel'][i].replace(' ',''))

"""# Realizando os downloads dos PDF's"""

from selenium import webdriver
from pdf2image import convert_from_path
from IPython.display import Image

import pandas as pd
import easyocr
import os

import time

# initialise browser
#browser = webdriver.Chrome(os.getcwd()+'/chromedriver')

# Entrando com o banco de dados

url_list = lista_link[0:3]
            
texto_final = []
Url_error = []

for i in range(0,len(url_list)):

  try:

    import sys
    sys.path.insert(0,'/usr/lib/chromium-browser/chromedriver')
    from selenium import webdriver
    chrome_options = webdriver.ChromeOptions()
    chrome_options.add_argument('--headless')
    chrome_options.add_argument('--no-sandbox')
    chrome_options.add_argument('--disable-dev-shm-usage')
    browser = webdriver.Chrome('chromedriver',chrome_options=chrome_options)

    browser.get(str(url_list[i]).replace('[','').replace(']','').replace("'",""))

    # Fazendo Download dos arquivos em PDF

    download = browser.find_element_by_xpath('//*[@id="icon"]/iron-icon')

    download.click()

  except:
    print(url_list[i])
    Url_error.append(url_list[i])

  time.sleep(20)

  # Transformando as páginas em jpg

  # Pegando uma lista de todos os documentos presentes na pasta

  arquivos = !ls '/gdrive/My Drive/PDFs_ANA'

  # Arrumando a lista 

  lista_arquivo = []
  for i in range(0,len(arquivos)):
    result = arquivos[i].replace('[','').replace(']','').replace("'","").replace(',','').replace('\t','').split('  ')
    lista_arquivo.append(result)
 
  lista_arquivo =[item for sublist in lista_arquivo for item in sublist]

  pdf_list = [x for x in lista_arquivo if x.endswith(('PDF'))]

  i = 0

  for pdf in pdf_list:

    pages = convert_from_path(pdf, 500)

    for page in pages:
      i = i+1
      page.save('out'+str(i)+'.jpg', 'JPEG')

  time.sleep(20)


  # Pegando uma lista de todos os documentos presentes na pasta

  arquivos = !ls '/gdrive/My Drive/PDFs_ANA'
  lista = str(arquivos).replace('\\t',' ').split(' ')

  # Arrumando a lista 

  lista_arquivo = []
  for i in range(0,len(lista)):
    result = lista[i].replace('[','').replace(']','').replace("'","").replace(',','')
    lista_arquivo.append(result)

  # Pegando apenas os arquivos de jpg

  imagens_lista = [x for x in lista_arquivo if x.endswith(('jpg', 'png'))]
  imagens_lista.sort()
  
  # Separando o conteudo textual presente nas imagens

  temporario = []
  texto = []
  for i in range(0,len(imagens_lista)):

    reader = easyocr.Reader(['pt'])
    resultado = reader.readtext(imagens_lista[i])

    # Formatando a parte textual 

    texto_parte = []
    for i in range(0,len(resultado)):
      result = str(resultado[i]).split("'")[1].split("'")[0]
      texto_parte.append(result)

      texto = []
      texto.append(" ".join(str(x) for x in texto_parte))

    print(texto)

    temporario.append([''.join(texto[:len(texto)])])

    flat_list = [item for sublist in temporario for item in sublist]

  texto_final.append(temporario)

  # Removendo o conteudo presente no Drive

  !rm ./*PDF
  !rm ./*jpg

  time.sleep(20)

"""# Estruturando o Dataframe"""

import re 

# Número da Resolução

Num_portaria = []
for i in range(0,len(texto_final)):
    
    try:
    
        if 'Nª' in str(texto_final[i]):
            result = str(texto_final[i]).split('Nª')[1][:5]
            Num_portaria.append(result)

        elif 'nª' in str(texto_final[i]):
            result = str(texto_final[i]).split('nª')[1][:5]
            Num_portaria.append(result)

        elif 'N?' in str(texto_final[i]):

            result = str(texto_final[i]).split('N?')[1][:5]
            Num_portaria.append(result)

        elif 'N ?' in str(texto_final[i]):

            result = str(texto_final[i]).split('N ?')[1][:5]
            Num_portaria.append(result)

        elif 'NM' in str(texto_final[i]):

            result = str(texto_final[i]).split('NM')[1][:5]
            Num_portaria.append(result)

        elif 'N2' in str(texto_final[i]):

            result = str(texto_final[i]).split('N2')[1][:5]
            Num_portaria.append(result)

        elif 'NC' in str(texto_final[i]):

            result = str(texto_final[i]).split('NC')[1][:5]
            Num_portaria.append(result)

        elif 'PORTARIA No' in str(texto_final[i]):

            result = str(texto_final[i]).split('PORTARIA No')[1][:5]
            Num_portaria.append(result)


        elif 'Portaria H?' in str(texto_final[i]):

            result = str(texto_final[i]).split('Portaria H?')[1][:5]
            Num_portaria.append(result)

        else: 
            result = re.findall(r'\d+0', str(texto_final[i]))[0]
            Num_portaria.append(result)
            
    except:
        if re.findall(r'\d+', str(texto_final[i])) == []:
          Num_portaria.append(0000)
        else:
          result = re.findall(r'\d+', str(texto_final[i]))[0]
          Num_portaria.append(result)
        
Num_port = []
for i in range(0,len(Num_portaria)):
    try:
        result = re.findall(r'\d+', str(Num_portaria[i]))[0]
        Num_port.append(result)
        
    except:
        result = '00'
        Num_port.append(result)
        
# Ano da Resolução

Ano_portaria = []
for i in range(0,len(texto_final)):
    try:
        if '", 0.' in str(texto_final[i])[0:100]:
          result = re.findall(r'\d{4}', str(texto_final[i]).split(')')[1])[0]
          Ano_portaria.append(result)

        else:
          result = re.findall(r'\d{4}', str(texto_final[i]))[0]
          Ano_portaria.append(result)

    except:
        print("Ano não encontrado")
        Ano_portaria.append('2021')

# Criando o ID 

tipo = ['701']*len(texto_final) # Tipo de Lei

parte1 = [i + j for i, j in zip(tipo, Num_port)] # Juntado os valores
ID = [i + j for i, j in zip(parte1, Ano_portaria)] 

# Criando um DataFrame para alocar os outputs

BANCO = pd.DataFrame (ID ,columns=['ID'])
BANCO['Texto_lei'] = texto_final
BANCO['Data_lei'] = ['']*len(texto_final)
BANCO['Data_publicação'] = ['']*len(texto_final)
BANCO['Tipo_lei'] = tipo
BANCO['Revogada'] = lista_revogada
BANCO['Setor'] = ['ANA']*len(texto_final)

BANCO

# Exportando em formato TXT

BANCO.to_csv("Resolucao_ANAC_parte11.txt", index=False, encoding='utf-8-sig',sep = '字')